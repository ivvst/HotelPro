import { Component, OnInit } from '@angular/core';
import { UserForAuth } from '../types/user';
import { UserService } from '../services/user.service';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Router } from '@angular/router';

@Component({
  selector: 'app-admin-panel',
  imports: [CommonModule, FormsModule],
  templateUrl: './admin-panel.components.html',
  styleUrl: './admin-panel.components.css'
})
export class AdminPanelComponent implements OnInit {
  users: UserForAuth[] = [];
  currentUserId: string | null = null;
  currentUserRole: string | null = null;
  isForbidden = false;
  isLoading = true;

  constructor(private userService: UserService, private router: Router) { }
  searchTerm = '';

  lastUpdatedUserId: string | null = null;
  sortField: string = 'username';
  sortAsc: boolean = true;

  sortBy(field: keyof UserForAuth) {
    if (this.sortField === field) {
      this.sortAsc = !this.sortAsc;
    } else {
      this.sortField = field;
      this.sortAsc = true;
    }
    this.filteredUsers.sort((a, b) => {
      const valA = (a[field] || '').toString().toLowerCase();
      const valB = (b[field] || '').toString().toLowerCase();
      return this.sortAsc ? valA.localeCompare(valB) : valB.localeCompare(valA);
    });
  }

  get filteredUsers(): UserForAuth[] {
    if (!this.searchTerm.trim()) return this.users;
    const term = this.searchTerm.toLowerCase();
    return this.users.filter(user =>
      (user.email?.toLowerCase() || '').includes(term) ||
      (user.username?.toLowerCase() || '').includes(term)
    );
  }

  ngOnInit(): void {
    // üîê –í–∑–µ–º–∏ –ø—Ä–æ—Ñ–∏–ª–∞ –Ω–∞ —Ç–µ–∫—É—â–∏—è –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
    this.userService.getProfileInfo().subscribe({
      next: (profile) => {
        this.currentUserId = profile._id;
        this.currentUserRole = profile.role ?? 'user';

        if (profile.role === 'admin') {
          // ‚úÖ –ó–∞—Ä–µ–¥–∏ –≤—Å–∏—á–∫–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏ —Å–∞–º–æ –∞–∫–æ –µ –∞–¥–º–∏–Ω
          this.userService.getAllUsers().subscribe({
            next: (data) => {
              this.users = data;
              this.isLoading = false;
            },
            error: (err) => {
              console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏:', err);
              this.isLoading = false;
            }
          });
        } else {
          // üö´ –ù–µ –µ –∞–¥–º–∏–Ω ‚Äî –Ω—è–º–∞ –¥–æ—Å—Ç—ä–ø
          this.isForbidden = true;
          this.isLoading = false;
        }
      },
      error: (err) => {
        console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª:', err);
        this.isForbidden = true;
        this.isLoading = false;
      }
    });
  }

  confirmRoleChange(userId: string, newRole: 'admin' | 'user') {
    const action = newRole === 'admin' ? '–Ω–∞–∑–Ω–∞—á–∏—Ç–µ –∑–∞ –∞–¥–º–∏–Ω' : '–ø—Ä–µ–º–∞—Ö–Ω–µ—Ç–µ –ø—Ä–∞–≤–∞—Ç–∞ –Ω–∞ –∞–¥–º–∏–Ω';
    const confirmed = confirm(`–°–∏–≥—É—Ä–Ω–∏ –ª–∏ —Å—Ç–µ, —á–µ –∏—Å–∫–∞—Ç–µ –¥–∞ ${action}?`);

    if (confirmed) {
      this.changeUserRole(userId, newRole);
    }
  }
  goToEditUser(userId: string): void {
    this.router.navigate(['/users', userId, 'edit-profile']);
  }

  changeUserRole(userId: string, newRole: 'admin' | 'user') {
    const user = this.users.find(u => u._id === userId);

    if (!user) {
      console.error(`‚ùå –ù–µ –µ –Ω–∞–º–µ—Ä–µ–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª —Å ID: ${userId}`);
      return;
    }

    console.log(`üì§ –ò–∑–ø—Ä–∞—â–∞–º –∑–∞—è–≤–∫–∞ –∑–∞ —Å–º—è–Ω–∞ –Ω–∞ —Ä–æ–ª—è:`, {
      username: user.username,
      email: user.email,
      role: newRole
    });

    this.userService.updateUser(userId, {
      username: user.username,
      email: user.email,
      role: newRole
    }).subscribe({
      next: (updatedUser) => {
        console.log('‚úÖ –û–±–Ω–æ–≤–µ–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª:', updatedUser);

        const index = this.users.findIndex(u => u._id === userId);
        if (index !== -1) {
          this.users[index].role = updatedUser.role;
        }
      },
      error: (err) => {
        console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å–º—è–Ω–∞ –Ω–∞ —Ä–æ–ª—è:', err);
      }
    });
  }

}
