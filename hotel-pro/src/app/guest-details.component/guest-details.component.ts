import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { forkJoin } from 'rxjs';

import { GuestService } from '../services/guest.service';
import { CruiseService } from '../services/cruise.service';

import { Cruise } from '../types/cruise';
import { Guest } from '../types/guests';
import { Excursion } from '../types/excursion';

import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-guest-details',
  templateUrl: './guest-details.component.html',
  styleUrl: './guest-details.component.css',
  standalone: true,
  imports: [FormsModule, CommonModule]
})
export class GuestDetailsComponent implements OnInit {
  guest: Guest | null = null;
  cruise: Cruise | null = null;

  loading = false;
  infoMsg = '';

  vipEnabled = false;
  vipServices: string[] = [];

  selectedExcursionId = '';
  confirmOpen = false;
  confirmExId: string | null = null;
  confirmExName: string | null = null;

  constructor(
    private route: ActivatedRoute,
    private guestService: GuestService,
    private cruiseService: CruiseService
  ) { }

  ngOnInit(): void {
    const guestId = this.route.snapshot.paramMap.get('id');
    if (!guestId) return;

    this.loading = true;
    this.guestService.getGuestById(guestId).subscribe({
      next: guest => {
        this.guest = guest;

        // VIP –¥–∞–Ω–Ω–∏
        this.vipEnabled = guest.isVIP ?? false;
        this.vipServices = Array.isArray(guest.vipServices) ? guest.vipServices : [];

        if (guest.cruiseId) {
          this.cruiseService.getCruiseById(guest.cruiseId).subscribe({
            next: cruise => {
              this.cruise = cruise;
              this.loading = false;
            },
            error: () => {
              this.loading = false;
            }
          });
        } else {
          this.loading = false;
        }
      },
      error: () => {
        this.loading = false;
      }
    });
  }

  /** –ü–æ–º–æ—â–µ–Ω: –Ω–∞–º–µ—Ä–∏ –µ–∫—Å–∫—É—Ä–∑–∏—è—Ç–∞ –ø–æ id –≤ —Ç–µ–∫—É—â–∏—è –∫—Ä—É–∏–∑ */
  getExcursionById(id?: string) {
    return this.cruise?.excursions?.find(e => e._id === id);
  }
  /** –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –≥–æ—Å—Ç—ä—Ç –≤–µ—á–µ –µ –∑–∞–ø–∏—Å–∞–Ω –≤ –µ–∫—Å–∫—É—Ä–∑–∏—è—Ç–∞ */
  isGuestAlreadyAddedToExcursion(guest: Guest, exId?: string): boolean {
    if (!exId || !guest?.excursions) return false;
    return guest.excursions.some(gex => String(gex._id) === String(exId));
  }

  /** –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–∏—Ä–∞–Ω —Ä–µ—Ñ—Ä–µ—à —Å–ª–µ–¥ –ø—Ä–æ–º—è–Ω–∞: –ø—Ä–µ–∑–∞—Ä–µ–∂–¥–∞ –≥–æ—Å—Ç–∞ –∏ –∫—Ä—É–∏–∑–∞ –∏ –ø–æ–∫–∞–∑–≤–∞ —Å—Ç–∞—Ç—É—Å */
  private refreshAfterChange(changedExId: string) {
    if (!this.guest?._id || !this.guest?.cruiseId) return;
    this.loading = true;

    forkJoin({
      guest: this.guestService.getGuestById(this.guest._id),
      cruise: this.cruiseService.getCruiseById(this.guest.cruiseId)
    }).subscribe({
      next: ({ guest, cruise }) => {
        this.guest = guest;
        this.cruise = cruise;

        const stillHas = (guest.excursions || []).some(e => String(e._id) === String(changedExId));
        const ex = cruise.excursions?.find(e => String(e._id) === String(changedExId));
        const isInWait = Array.isArray(ex?.waitlist) && ex!.waitlist!.some(w => String(w.guestId) === String(guest._id));

        this.infoMsg = stillHas
          ? '‚úÖ –ì–æ—Å—Ç—ä—Ç –µ –∑–∞–ø–∏—Å–∞–Ω –∑–∞ –µ–∫—Å–∫—É—Ä–∑–∏—è—Ç–∞.'
          : (isInWait ? '‚è≥ –ï–∫—Å–∫—É—Ä–∑–∏—è—Ç–∞ –µ –ø—ä–ª–Ω–∞ ‚Äî –≥–æ—Å—Ç—ä—Ç –µ –≤ —á–∞–∫–∞—â–∏.' : '‚ÑπÔ∏è –î–∞–Ω–Ω–∏—Ç–µ —Å–∞ –æ–±–Ω–æ–≤–µ–Ω–∏.');

        this.loading = false;
        setTimeout(() => (this.infoMsg = ''), 3000);
      },
      error: () => { this.loading = false; }
    });
  }

  /** –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –µ–∫—Å–∫—É—Ä–∑–∏—è –∫—ä–º –≥–æ—Å—Ç–∞ (–æ—Å—Ç–∞–≤—è–º–µ —Ç–≤–æ—è –ø–æ—Ç–æ–∫) */
  addExcursionToGuest(): void {
    if (!this.guest || !this.selectedExcursionId) return;

    const ex = this.cruise?.excursions.find(e => e._id === this.selectedExcursionId);
    if (!ex || !ex._id || !this.guest._id) return;

    const already = (this.guest.excursions || []).some(gex => String(gex._id) === String(ex._id));
    if (already) {
      this.infoMsg = '‚ÑπÔ∏è –ì–æ—Å—Ç—ä—Ç –≤–µ—á–µ –µ –∑–∞–ø–∏—Å–∞–Ω –≤ —Ç–∞–∑–∏ –µ–∫—Å–∫—É—Ä–∑–∏—è.';
      setTimeout(() => (this.infoMsg = ''), 2500);
      return;
    }

    this.loading = true;
    this.guestService.addExcursionToGuest(this.guest._id, { _id: ex._id, name: ex.name })
      .subscribe({
        next: updatedGuest => {
          // –ª–æ–∫–∞–ª–Ω–æ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –∫–∞–∫—Ç–æ –ø—Ä–∏ —Ç–µ–±
          this.guest = updatedGuest;
          const exId = ex._id;
          this.selectedExcursionId = '';

          // –ø—Ä–µ–∑–∞—Ä–µ–¥–∏ –≥–æ—Å—Ç–∞ + –∫—Ä—É–∏–∑–∞ –∏ –ø–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç—É—Å–∞
          if (exId) {
            this.refreshAfterChange(exId);
          }
        },
        error: err => {
          console.error('addExcursion error:', err);
          this.loading = false;
        }
      });
  }

  /** –ü—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ –µ–∫—Å–∫—É—Ä–∑–∏—è –æ—Ç –≥–æ—Å—Ç–∞ */
  removeExcursionFromGuest(excursionId: string): void {
    if (!this.guest || !this.guest._id) return;

    this.loading = true;
    this.guestService.removeExcursionFromGuest(this.guest._id, excursionId)
      .subscribe({
        next: updatedGuest => {
          this.guest = updatedGuest;
          this.infoMsg = 'üóë –ï–∫—Å–∫—É—Ä–∑–∏—è—Ç–∞ –µ –ø—Ä–µ–º–∞—Ö–Ω–∞—Ç–∞ –æ—Ç –≥–æ—Å—Ç–∞.';
          // –ø—Ä–µ–∑–∞—Ä–µ–¥–∏ –∫—Ä—É–∏–∑–∞, –∑–∞ –¥–∞ —Å–µ –æ–±–Ω–æ–≤—è—Ç —á–∞–∫–∞—â–∏—Ç–µ/–∫–∞–ø–∞—Ü–∏—Ç–µ—Ç—ä—Ç
          if (this.guest?.cruiseId) {
            this.cruiseService.getCruiseById(this.guest.cruiseId).subscribe({
              next: cruise => {
                this.cruise = cruise;
                this.loading = false;
                setTimeout(() => (this.infoMsg = ''), 2500);
              },
              error: () => {
                this.loading = false;
              }
            });
          } else {
            this.loading = false;
            setTimeout(() => (this.infoMsg = ''), 2500);
          }
        },
        error: err => {
          console.error('removeExcursion error:', err);
          this.loading = false;
        }
      });
  }

  /** –ú–æ–¥–∞–ª: –æ—Ç–≤–∞—Ä—è–Ω–µ/–∑–∞—Ç–≤–∞—Ä—è–Ω–µ/–ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ */
  openConfirm(ex: { _id?: string; name: string }): void {
    if (!ex._id) return;
    this.confirmExId = ex._id;
    this.confirmExName = ex.name;
    this.confirmOpen = true;
  }

  closeConfirm(): void {
    this.confirmOpen = false;
    this.confirmExId = null;
    this.confirmExName = null;
  }

  confirmDelete(): void {
    if (!this.confirmExId) return;
    this.removeExcursionFromGuest(this.confirmExId);
    this.closeConfirm();
  }
}
